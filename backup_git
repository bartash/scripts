#!/usr/bin/env bash
# backup by cloning
# create clone with 'cd /Volumes/Elvis/backups/cdh; git clone --mirror ~/git/cdh/hive'
#
# try 'git config gc.auto 256' to force more packing 
# see https://stackoverflow.com/questions/16337498/understanding-git-gc-auto
#

function error_exit {
    echo "$1" >&2   ## Send message to stderr. Exclude >&2 if you don't want it that way.
    exit "${2:-1}"  ## Return a code specified by $2 or 1 by default.
}

while getopts g opts; do
   case ${opts} in
        g)
            GC=true
            ;;
        *)
            echo "usage: $0 [-g]"
            exit 0
            ;;
   esac
done

# where backups are stored
BACKUP_HOME=/Volumes/Elvis/backups

cd $BACKUP_HOME || error_exit "cannot cd to $BACKUP_HOME"

# list of repos to backup
REPO_NAMES=( \
    asf/hadoop.git  \
    asf/hive-iml.git \
    asf/hive.git  \
    asf/hive2.git  \
    cdh/hadoop.git \
    cdh/hive-iml.git \
    cdh/hive.git \
    cdh/hive2-iml.git \
    cdh/hive2.git \
    cdh/hive3.git \
    cdh/asherman-jenkins-master.git \
    scripts.git \
    jdbc.git \
    kitchen/cloudcat-hive-ptest.git \
    starship/cmf.git \
    kitchen/cloudstack-reporting.git \
    ssh.git \
    )


for repoName in "${REPO_NAMES[@]}"
do
    repos=${BACKUP_HOME}/$repoName
    echo $repos
    cd $repos

    # should this be git remote update -p ??
    git remote update

    if [ -z "$GC" ]
    then
        # echo no gc

        # I don't know if this config even works
        git config gc.pruneExpire 52.weeks.ago
        git config gc.reflogExpireUnreachable  24.months.ago

        # I think this helps pack more often
        git config --local gc.auto 256

        git gc --auto
    else
        # echo with gc
        chflags -R nouchg *
        git gc
        # if you see 
        #   warning: unable to unlink ./objects/ff/d0439f332f0ac20314b6f413e149596b493411: Operation not permitted
        # then run
        #   chflags -R nouchg *
    fi
    echo '------------------------'
done


